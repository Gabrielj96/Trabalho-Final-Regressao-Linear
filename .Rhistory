library(dplyr)
library(corrplot)
library(car)
options(scipen = 999)
df = read.csv("Marketing_regressao.csv")
head(df)
as.data.frame(summary(df))
par(mfrow=c(1,3))
boxplot(df$revenue, ylab="Revenue")
boxplot(df$tv_S, ylab="tv_S")
boxplot(df$ooh_S, ylab="ooh_S")
boxplot(df$facebook_I, ylab="facebook_I")
boxplot(df$search_clicks_P, ylab="search_clicks_P")
boxplot(df$search_S, ylab="search_S")
boxplot(df$competitor_sales_B, ylab="competitor_sales_B")
boxplot(df$facebook_S, ylab="facebook_S")
boxplot(df$newsletter, ylab="newsletter")
par(mfrow=c(1,3))
qqnorm(df$revenue, ylab="Revenue"); qqline(df$revenue, ylab="Revenue")
qqnorm(df$tv_S, ylab="tv_S"); qqline(df$tv_S, ylab="tv_S")
qqnorm(df$ooh_S, ylab="ooh_S"); qqline(df$ooh_S, ylab="ooh_S")
qqnorm(df$facebook_I, ylab="facebook_I"); qqline(df$facebook_I, ylab="facebook_I")
qqnorm(df$search_clicks_P, ylab="search_clicks_P"); qqline(df$search_clicks_P, ylab="search_clicks_P")
qqnorm(df$search_S, ylab="search_S"); qqline(df$search_S, ylab="search_S")
qqnorm(df$competitor_sales_B, ylab="competitor_sales_B"); qqline(df$competitor_sales_B, ylab="competitor_sales_B")
qqnorm(df$facebook_S, ylab="facebook_S"); qqline(df$facebook_S, ylab="facebook_S")
qqnorm(df$newsletter, ylab="newsletter"); qqline(df$newsletter, ylab="newsletter")
df_shap = data.frame(Var = c("0"), P_value = c(0))
for (variable in colnames(subset(df, select = -c(DATE, events)))) {
df_shap[nrow(df_shap) + 1,] = c(variable, shapiro.test(df[[variable]])[2])
}
df_shap
corrplot::corrplot(cor(df[, sapply(df, is.numeric)], method = "pearson"), method = 'number', type = 'lower', number.cex = 0.5, col=colorRampPalette(c("red","gray","blue"))(200))
psych::pairs.panels(df[, sapply(df, is.numeric)],
smooth = FALSE,
method = "pearson",
density = TRUE,
ellipses = FALSE,
cex.cor = 1.5
)
modelo = lm(revenue ~ tv_S + ooh_S + print_S + search_S + facebook_S, data = df)
summary(modelo)
anova(modelo)
modelo1 = lm(revenue ~ 1, data = df)
summary(modelo1)
anova(modelo1)
modelo_stepForward_AIC = step(modelo1, scope = ~tv_S + ooh_S + print_S + facebook_I + search_clicks_P + search_S + competitor_sales_B + facebook_S + newsletter, direction = 'forward', k = 2)
n = nrow(df)
modelo_stepForward_BIC = step(modelo1, scope = ~tv_S + ooh_S + print_S + facebook_I + search_clicks_P + search_S + competitor_sales_B + facebook_S + newsletter, direction = 'forward', k = log(n))
summary(modelo_stepForward_AIC)
summary(modelo_stepForward_BIC)
compareCoefs(modelo_stepForward_AIC, modelo_stepForward_BIC)
residuos1 <- modelo_stepForward_BIC$residuals
summary(residuos1)
preditos1 = predict(modelo_stepForward_BIC)
preditos1 = modelo_stepForward_BIC$fitted.values
boxCox(df$revenue ~ df$tv_S + df$ooh_S + df$print_S + df$facebook_I + df$search_clicks_P + df$search_S + df$competitor_sales_B + df$facebook_S + df$newsletter)
modelo1 = lm(revenue ~ 1, data = df)
summary(modelo1)
anova(modelo1)
boxCox(df$revenue ~ df$tv_S + df$ooh_S + df$print_S + df$facebook_I + df$search_clicks_P + df$search_S + df$competitor_sales_B + df$facebook_S + df$newsletter, plotit = FALSE)
modelo1 = lm(revenue ~ 1, data = df)
summary(modelo1)
anova(modelo1)
df_boxcox = boxCox(df$revenue ~ df$tv_S + df$ooh_S + df$print_S + df$facebook_I + df$search_clicks_P + df$search_S + df$competitor_sales_B + df$facebook_S + df$newsletter, plotit = FALSE)
modelo1 = lm(revenue ~ 1, data = df)
summary(modelo1)
anova(modelo1)
df_boxcox
modelo = lm(revenue ~ tv_S + ooh_S + print_S + search_S + facebook_S, data = df)
summary(modelo)
anova(modelo)
modelo = lm(revenue ~ tv_S + ooh_S + print_S + search_S + facebook_S, data = df)
summary(modelo)
anova(modelo)
modelo = lm(revenue ~ tv_S + ooh_S + print_S + search_S + facebook_S, data = df)
summary(modelo)
anova(modelo)
modelo_stepForward_AIC = step(modelo1, scope = ~tv_S + ooh_S + print_S + facebook_I + search_clicks_P + search_S + competitor_sales_B + facebook_S + newsletter, direction = 'forward', k = 2)
n = nrow(df)
modelo_stepForward_BIC = step(modelo1, scope = ~tv_S + ooh_S + print_S + facebook_I + search_clicks_P + search_S + competitor_sales_B + facebook_S + newsletter, direction = 'forward', k = log(n))
residuos1 = modelo_stepForward_BIC$residuals
summary(residuos1)
preditos1 = predict(modelo_stepForward_BIC)
preditos1 = modelo_stepForward_BIC$fitted.values
qqnorm(residuos1) ; qqline(residuos1)
qqnorm(residuos1) ; qqline(residuos1)
shapiro.test(residuos1)
